// <auto-generated />
using System;
using EtlChallenge.ChallengeDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EtlChallenge.ChallengeDBManager.Migrations
{
    [DbContext(typeof(ChallengeDBContext))]
    [Migration("20250715224957_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EtlChallenge.Model.Policy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyFileStorageReference")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PolicyFileStorageReference");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("EtlChallenge.Model.PolicyFile", b =>
                {
                    b.Property<string>("StorageReference")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StorageReference");

                    b.ToTable("PolicyFiles");
                });

            modelBuilder.Entity("EtlChallenge.Model.Risk", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Peril")
                        .HasColumnType("int");

                    b.Property<string>("PolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RiskFileStorageReference")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.HasIndex("RiskFileStorageReference");

                    b.ToTable("Risks");
                });

            modelBuilder.Entity("EtlChallenge.Model.RiskFile", b =>
                {
                    b.Property<string>("StorageReference")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StorageReference");

                    b.ToTable("RiskFiles");
                });

            modelBuilder.Entity("EtlChallenge.Model.StagedPolicy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyFileStorageReference")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PolicyFileStorageReference");

                    b.ToTable("StagedPolicies");
                });

            modelBuilder.Entity("EtlChallenge.Model.StagedRisk", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Peril")
                        .HasColumnType("int");

                    b.Property<string>("PolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskFileStorageReference")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RiskFileStorageReference");

                    b.ToTable("StagedRisks");
                });

            modelBuilder.Entity("EtlChallenge.Model.Policy", b =>
                {
                    b.HasOne("EtlChallenge.Model.PolicyFile", "PolicyFile")
                        .WithMany("Policies")
                        .HasForeignKey("PolicyFileStorageReference");

                    b.Navigation("PolicyFile");
                });

            modelBuilder.Entity("EtlChallenge.Model.Risk", b =>
                {
                    b.HasOne("EtlChallenge.Model.Policy", null)
                        .WithMany("Risks")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtlChallenge.Model.RiskFile", "RiskFile")
                        .WithMany("Risks")
                        .HasForeignKey("RiskFileStorageReference");

                    b.Navigation("RiskFile");
                });

            modelBuilder.Entity("EtlChallenge.Model.StagedPolicy", b =>
                {
                    b.HasOne("EtlChallenge.Model.PolicyFile", "PolicyFile")
                        .WithMany("StagedPolicies")
                        .HasForeignKey("PolicyFileStorageReference");

                    b.Navigation("PolicyFile");
                });

            modelBuilder.Entity("EtlChallenge.Model.StagedRisk", b =>
                {
                    b.HasOne("EtlChallenge.Model.RiskFile", "RiskFile")
                        .WithMany("StagedRisks")
                        .HasForeignKey("RiskFileStorageReference");

                    b.Navigation("RiskFile");
                });

            modelBuilder.Entity("EtlChallenge.Model.Policy", b =>
                {
                    b.Navigation("Risks");
                });

            modelBuilder.Entity("EtlChallenge.Model.PolicyFile", b =>
                {
                    b.Navigation("Policies");

                    b.Navigation("StagedPolicies");
                });

            modelBuilder.Entity("EtlChallenge.Model.RiskFile", b =>
                {
                    b.Navigation("Risks");

                    b.Navigation("StagedRisks");
                });
#pragma warning restore 612, 618
        }
    }
}
